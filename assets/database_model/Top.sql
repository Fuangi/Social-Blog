-- MySQL Script generated by MySQL Workbench
-- Fri Mar 17 15:42:34 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Social_blog
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Social_blog
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Social_blog` DEFAULT CHARACTER SET utf8 ;
USE `Social_blog` ;

-- -----------------------------------------------------
-- Table `Social_blog`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`users` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`users` (
  `user_id` VARCHAR(20) NOT NULL COMMENT 'the idis a variable character and will be in the format: sb110320230000000001. The sb stands for \"social blog\", the 11032023 stands for the date of creation and the last 10 digits are for the person\'s serial number.this has a length of 20 characters... ',
  `user_name` VARCHAR(45) NOT NULL,
  `user_email` VARCHAR(45) NOT NULL,
  `user_passowrd` VARCHAR(45) NOT NULL COMMENT 'A minimum of eight characters( a concatenation of alpha numeric and special characters)',
  `user_dob` DATE NOT NULL,
  `user_contact` VARCHAR(45) NOT NULL,
  `user_gender` VARCHAR(6) NOT NULL,
  `user_status` VARCHAR(8) NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC) VISIBLE,
  UNIQUE INDEX `user_email_UNIQUE` (`user_email` ASC) VISIBLE,
  UNIQUE INDEX `user_contact_UNIQUE` (`user_contact` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`table1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`table1` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`table1` (
  `idtable1` INT NOT NULL,
  PRIMARY KEY (`idtable1`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`posts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`posts` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`posts` (
  `post_id` VARCHAR(11) NOT NULL COMMENT 'The post id is a hash value of 11 characters',
  `post_title` VARCHAR(45) NOT NULL,
  `post_data` DATE NOT NULL,
  `post_content` LONGTEXT NOT NULL,
  `post_likes` INT NOT NULL DEFAULT 0,
  `post_dislikes` INT NOT NULL DEFAULT 0,
  `post_engagements` INT NOT NULL COMMENT 'Its value is boolean (',
  `post_commenting_state` TINYINT NOT NULL COMMENT 'This describes weather or not comments are allowed for the post.\n 0 for not allowed and 1 for comments allowed.',
  `users_user_id` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`post_id`),
  UNIQUE INDEX `post_id_UNIQUE` (`post_id` ASC) VISIBLE,
  INDEX `fk_posts_users_idx` (`users_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_posts_users`
    FOREIGN KEY (`users_user_id`)
    REFERENCES `Social_blog`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`Comments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`Comments` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`Comments` (
  `comment_id` VARCHAR(15) NOT NULL COMMENT 'A combination of the post id plus an interger(this interger is an increamentation). This would ensure that every comment is uniquely identified.',
  `comment_content` LONGTEXT NULL,
  `comment_date` DATE NULL,
  `comment_likes` INT NULL DEFAULT 0,
  `comment_dislikes` INT NULL DEFAULT 0,
  `users_user_id` VARCHAR(20) NOT NULL,
  `posts_post_id` VARCHAR(11) NOT NULL,
  PRIMARY KEY (`comment_id`),
  INDEX `fk_Comments_users1_idx` (`users_user_id` ASC) VISIBLE,
  INDEX `fk_Comments_posts1_idx` (`posts_post_id` ASC) VISIBLE,
  CONSTRAINT `fk_Comments_users1`
    FOREIGN KEY (`users_user_id`)
    REFERENCES `Social_blog`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comments_posts1`
    FOREIGN KEY (`posts_post_id`)
    REFERENCES `Social_blog`.`posts` (`post_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`comment_replies`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`comment_replies` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`comment_replies` (
  `reply_id` VARCHAR(20) NOT NULL,
  `comment_id` VARCHAR(15) NOT NULL,
  `Comments_comment_id` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`reply_id`),
  UNIQUE INDEX `reply_id_UNIQUE` (`reply_id` ASC) VISIBLE,
  INDEX `fk_comment_replies_Comments1_idx` (`Comments_comment_id` ASC) VISIBLE,
  CONSTRAINT `fk_comment_replies_Comments1`
    FOREIGN KEY (`Comments_comment_id`)
    REFERENCES `Social_blog`.`Comments` (`comment_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`address` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`address` (
  `address_id` INT NOT NULL,
  `address_house_no` INT NULL,
  `address_street_name` VARCHAR(45) NULL,
  `address_city` VARCHAR(45) NULL,
  `address_region` VARCHAR(45) NOT NULL,
  `address_country` VARCHAR(45) NOT NULL,
  `address_zipcode` VARCHAR(0) NULL,
  `users_user_id` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`address_id`, `address_region`, `address_country`, `users_user_id`),
  UNIQUE INDEX `address_id_UNIQUE` (`address_id` ASC) VISIBLE,
  INDEX `fk_address_users1_idx` (`users_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_address_users1`
    FOREIGN KEY (`users_user_id`)
    REFERENCES `Social_blog`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`files` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`files` (
  `file_id` INT NOT NULL COMMENT 'It is a hash interger value of 15 characters. ',
  `file_url` VARCHAR(200) NULL,
  `file_for` VARCHAR(200) NULL COMMENT 'Describes the utilization of the file. Is it for a post, a comment or a picture.',
  PRIMARY KEY (`file_id`),
  UNIQUE INDEX `file_url_UNIQUE` (`file_url` ASC) VISIBLE,
  UNIQUE INDEX `file_id_UNIQUE` (`file_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`users_has_files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`users_has_files` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`users_has_files` (
  `users_user_id` VARCHAR(20) NOT NULL,
  `files_file_id` INT NOT NULL,
  PRIMARY KEY (`users_user_id`, `files_file_id`),
  INDEX `fk_users_has_files_files1_idx` (`files_file_id` ASC) VISIBLE,
  INDEX `fk_users_has_files_users1_idx` (`users_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_users_has_files_users1`
    FOREIGN KEY (`users_user_id`)
    REFERENCES `Social_blog`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_has_files_files1`
    FOREIGN KEY (`files_file_id`)
    REFERENCES `Social_blog`.`files` (`file_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`Comments_has_files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`Comments_has_files` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`Comments_has_files` (
  `Comments_comment_id` VARCHAR(15) NOT NULL,
  `files_file_id` INT NOT NULL,
  PRIMARY KEY (`Comments_comment_id`, `files_file_id`),
  INDEX `fk_Comments_has_files_files1_idx` (`files_file_id` ASC) VISIBLE,
  INDEX `fk_Comments_has_files_Comments1_idx` (`Comments_comment_id` ASC) VISIBLE,
  CONSTRAINT `fk_Comments_has_files_Comments1`
    FOREIGN KEY (`Comments_comment_id`)
    REFERENCES `Social_blog`.`Comments` (`comment_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comments_has_files_files1`
    FOREIGN KEY (`files_file_id`)
    REFERENCES `Social_blog`.`files` (`file_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Social_blog`.`posts_has_files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Social_blog`.`posts_has_files` ;

CREATE TABLE IF NOT EXISTS `Social_blog`.`posts_has_files` (
  `posts_post_id` VARCHAR(11) NOT NULL,
  `files_file_id` INT NOT NULL,
  PRIMARY KEY (`posts_post_id`, `files_file_id`),
  INDEX `fk_posts_has_files_files1_idx` (`files_file_id` ASC) VISIBLE,
  INDEX `fk_posts_has_files_posts1_idx` (`posts_post_id` ASC) VISIBLE,
  CONSTRAINT `fk_posts_has_files_posts1`
    FOREIGN KEY (`posts_post_id`)
    REFERENCES `Social_blog`.`posts` (`post_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_posts_has_files_files1`
    FOREIGN KEY (`files_file_id`)
    REFERENCES `Social_blog`.`files` (`file_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
